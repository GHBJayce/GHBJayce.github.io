[{"content":"目录 第一章 概论 第二章 线性表 第三章 栈、队列和数组 第四章 树和二叉树 第五章 图 第六章 查找 第七章 排序 阅读说明 本书 书名：《数据结构导论》 出版：外语教学与研究出版社 版本：2012年版 全书以类C语言来描述相关内容，例如：存储结构、算法等。 本文涉及知识点 数学知识 乘法分配率 对数 等差数列、高斯求和 概要 数据、数据元素和数据项 基本概念 三者的关系 数据的逻辑结构和存储结构 四种基本的逻辑结构和特点 集合 线性结构 树形结构 图结构 两种基本的存储结构 顺序存储 链式存储 逻辑结构与存储结构的关系 运算与逻辑结构的关系 算法分析 描述方法 评价因素 时间复杂度的分析方法 空间复杂度的分析方法 数据、数据元素和数据项 概念和联系 数据项：在数据表中指的是一个个的字段，数据的最小标识单位。 数据元素：在数据表中相当于一行记录，由若干个数据项组成。 数据：被计算机处理、存储的对象，由若干个数据元素组成。 数据的逻辑结构和存储结构 概念 数据结构：包含数据的逻辑结构、存储结构和基本运算。 逻辑结构：整个数据元素之间的逻辑关系。 逻辑关系：指单个数据元素之间的关联方式或邻接关系，也就是单个数据元素之间的组织形式。 存储结构：也称物理结构，数据的逻辑结构在计算机中的实现称为数据的存储结构。 简单点说：为了保存数据的逻辑结构到计算机中而实现的存储结构。 逻辑结构 为了简便称呼，以下一个结点表示一个数据元素\n四类基本的逻辑结构：\n集合：任意两个结点之间都没有邻接关系，组织形式松散，就像抽奖箱里的乒乓球。 结点之间除了同属一个集合，并没有别的关系。 线性结构：结点之间一个个依次相邻接排列，形成一条“链”，就像一条绳子上的多个绳结。 结点之间是一对一的相互关系。 树形结构：上层结点有多个下层结点，下层结点只有一个上层结点，具有分支、层次特性，就像一颗树。 结点之间是一对多的相互关系。 图结构：最为复杂的结构，任意两个结点都可以相邻接，就像地铁线路图、人与人之间的社交网络。 结点之间是多对多的相互关系。 存储结构 存储结构一般包括两个部分：\n需要存储的数据元素 结点之间的逻辑关系 实现结点之间的逻辑关系的存储结构，一般有四种形式，主要掌握顺序存储和链式存储：\n顺序存储：所有结点存储在一个连续的存储区域里，利用结点在存储器中的相对位置，来表示结点之间的逻辑关系。 链式存储：除了存储结点本身，还需要一个指针，指针指向有逻辑关系的结点，也就是利用指针表示结点之间的逻辑关系。 索引存储 散列存储 如何描述 怎么描述存储结构是哪种类型？哪种实现形式呢？分为两种方式：\n机器级：即存储结构在计算机存储器里的表示形式，以内存地址的方式。 语言级：即用程序设计语言中的类型说明、变量说明，例如，数据类型：数组、结构体和指针等。 运算 概念 运算是指在逻辑结构上施加的操作，也就是对逻辑结构的加工。\n这些运算操作包括：\n建立 查找 读取 插入 删除 等\u0026hellip; 算法分析 评价算法 评价算法好坏的因素分为几个方面：\n正确性：能正确地实现预定的功能，满足具体问题的需要。 易读性：易于阅读、理解和交流，便于调试、修改和扩充。 健壮性：能处理不同的输入环境，即使是非法数据，也不会产生预料不到的运行结果。 时空性：指算法的时间性能（所需计算量）和空间性能（所需存储量）。 时间复杂度 计算量 来算一算函数执行了几次\n例子A：\n1 2 3 4 5 int func1(void) { printf(\u0026#34;hello GHBJayce\u0026#34;); return 0; } 共执行了2次，printf1次 + return1次\n例子B：\n1 2 3 4 5 6 7 int func2(int n) { for (int i = 0; i \u0026lt; n; ++i) { printf(\u0026#34;hello GHBJayce\u0026#34;); } return 0; } 共执行了3n + 3次\n分析过程：\nint i = 0，由始至终仅会执行1次。 i \u0026lt; n，执行n + 1次。 ++i，执行n次。 printf，执行n次。 return，执行1次。 要估算某段代码的执行次数，可以用T(n)来表示：\nT：某段代码的总执行次数。 n：输入数据的大小或者数量。 代入以上例子来表示：\n例子A：T(n) = 2 例子B：T(n) = 3n + 3 转换 得出代码的执行次数估算值后，需要转换成时间复杂度的表示方式，以下是转换规则：\n如果T(n)是常数的话，时间复杂度直接估算为 1。 如果T(n)不是常数的话，例如：常数 × n + 常数 仅保留最高次项，也就是常数 × n 常数化为1，也就是1 × n，这里的系数可以直接省略。 因此时间复杂度估算为：n。 表达方式还不完整，需要加上大O表示法，例如：O(时间复杂度估算值)\n结合以上例子，那么时间复杂度表示为：\n例子A：O(1) 例子B：O(n) 如果代码量比较多或者函数调用比较多的情况下这样估算会相当麻烦，所以下面是简化估算过程：\n例子C：\n1 2 3 4 5 6 7 8 void func3(int n) { for (int i = 0; i \u0026lt; n; ++i) { for (int j = 0; j \u0026lt; n; ++j) { printf(\u0026#34;hello GHBJayce\u0026#34;); } } } 分析过程：\n里面的for循环的时间复杂度：n + 1 这里for的时间复杂度：n for里面的语句的时间复杂度：1 外面的for循环的时间复杂度：(n + 1) × n，也就是(n × n) + (n × 1)，即n² + n 最终时间复杂度为：O(n²)\n例子D：\n1 2 3 4 5 6 7 8 void func(int n) { for (int i = 0; i \u0026lt; n; ++1) { for (int j = i; j \u0026lt; n; ++j) { printf(\u0026#34;hello GHBJayce\u0026#34;); } } } 最终时间复杂度为：O(n²)，待补充\u0026hellip;\n例子E：\n1 2 3 4 5 6 void func(int n) { for (int i = 1; i \u0026lt; n; i *=2) { printf(\u0026#34;hello GHBJayce\u0026#34;); } } 最终时间复杂度为：O(logn)，待补充\u0026hellip;\n性能对比 常数阶：O(1) 对数阶：O(logn) 线性阶：O(n) 线性对数阶：O(nlogn) 多项式阶：O(n²) 平方阶：O(n²) 立方阶：O(n3) K次方阶：O(nk) 指数阶：O(2n) 以上时间复杂度，复杂程度和耗时从上往下依次增加，即越往下时间复杂度越高，所需耗时越多。\n空间复杂度 待补充\u0026hellip;\n参考 指数和对数 小学生也能看懂的时间复杂度 小学速算技巧15讲：简便计算，认知乘法分配率 ","date":"2023-08-20T16:36:20+08:00","permalink":"https://ghbjayce.github.io/p/book/080901/02142/chapter1/","title":"第一章 概论 - 《数据结构导论》笔记"},{"content":"前言 开头废话有点多，点我进入正题\n为什么想要搭建一个博客？ 说起来有很多方面的因素，最重要的目的是希望能够留下一些技术积累和记录可以给别人看，同时提升一下写作的能力，毕竟与平时记笔记的方式完全不同。\n虽然也没有什么人看🤷\n其实在此之前也有写过博客，比如早期使用heroku + php搭建的个人博客，因为需要不断开发完善功能，加上后来也不免费了，索性不折腾直接上博客网站上写博客，如：CSDN、Segmentfault等。\n但这些平台使用下来以后也发现了一些问题，总的来说就是不适合自己的使用，写文章的过程也不够简洁直接，不够纯粹。\n我理想中的博客是什么？ 专注于markdown的编写 支持全文检索 具有标签功能 能够归档文章 免费 支持永久存储 为什么选择了hugo？ 查阅资料得知，静态站点生成器有三种提的比较多，分别是：\njekyll，基于Ruby语言编写 hexo，基于Node.js编写 hugo，基于Go语言编写 之所以选择hugo，它是当中编译速度最快、文档相对友好、star数量还多，正好无意间找到Hugo Themes的主题，很好的契合了需求，就决定是它了。\n阅读前提 本文默认你已经掌握了以下的几个点：\n了解github pages并且会配置 熟悉使用git 通过该文章可以快速上手使用hugo，所以有一些内容不会详细展开。\n快速入门 安装Hugo 这里我用的是Mac系统，所以采用Homebrew的方式进行安装，其他安装方式自行查阅。\n1 2 brew install hugo hugo version 创建项目 1 2 3 hugo new site your-project-name cd your-project-name git init 由于我已经有git项目ghbjayce.github.io，里面没有任何东西，所以这里我使用了hugo new site GHBJayce --force，既不影响hugo的生成又不影响git的项目。\n执行完以后，你会得到以下的目录结构：\n1 2 3 4 5 6 7 8 9 ├── archetypes │ └── default.md ├── assets ├── content ├── data ├── hugo.toml ├── layouts ├── static └── themes 安装主题 由于新建的项目没有默认主题，我们从主题库把挑好的主题下载下来。\n1 2 3 4 5 6 git clone git@github.com:CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack cp -r ./themes/hugo-theme-stack/exampleSite/content/* ./content cp ./themes/hugo-theme-stack/exampleSite/config.yaml ./hugo.yaml rm -f ./hugo.toml # 以下是示例主题需要操作的命令，避免没有翻墙的情况下启动不了项目 rm -rf ./content/post/rich-content 站点配置文件为hugo.toml，支持三种后缀的格式：toml、yaml、json，这里我选择用yaml\nHello World 生成一篇文章。\n1 2 # 对应的生成位置：/your-project-name/content/post/first-post.md hugo new post/first-post.md 打开它写点内容。\n1 2 3 4 5 6 7 --- title: \u0026#34;First Post\u0026#34; date: 2023-06-20T17:45:58+08:00 draft: true --- # hello world 启动 1 2 # 执行成功以后，终端会出现server的地址，例如：http://localhost:1313/ hugo server --buildDrafts --buildDrafts的作用是草稿文章（对应文章中的draft: true属性）也进行生成，去除的话会跳过生成草稿。\n构建\u0026amp;发布 1 hugo 你会看到多出一个public目录，就是构建好以后的内容，里面的内容完全是静态的，放到站点下就能够访问。\n但是我们要发布到github page上，根目录只支持/docs，所以我们得把public改成docs，有两种方式：\n构建时加上参数：hugo --destination docs 在配置文件中加入参数：publicDirectory: docs 如果仓库只放public目录下的内容，那么可以忽略这里。\n版本说明 文中相关软件版本说明：\nhugo：v0.113.0 hugo-theme-stack：v3.16.0 参考 Quick Start | Hugo URL management | Hugo ","date":"2023-06-20T23:46:50+08:00","image":"https://repository-images.githubusercontent.com/11180687/9d3d8200-abf2-11e9-803c-4cdfde0d22e5","permalink":"https://ghbjayce.github.io/p/static-site-generator/hugo/quick-start/","title":"hugo快速上手搭建一个静态博客"}]