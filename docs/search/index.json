[{"content":"概念 数列：按特定规律排列的一组数字的集合。 等差数列：指从第二项起，每一项与它的前一项的差都是同一个常数，这个常数称为公差。 例如：\n1、4、7、10、13、16、19 这是一组等差数列，每个数字之间相差3，其中：\n公差为：3。 首项（数列的第一个数字）是：1。 末项（数列的最后一个数字）是：19。 项数（数列的总数）：7。 数列的项（简称项）：数列中的一个个数字。 辨认 以下数列是否是等差数列？\n2、6、10、14、18、22，是 1、2、1、2、3、4、5、6，不是 1、2、4、8、16、32、64，不是 9、8、7、6、5、4、3、2，是 计算 求项的数 2、5、8、11、14、\u0026hellip;、?，求？第21项的数字是多少？\n如果项是最后一个也称为求末项\n分析：\n公差是3，找一下规律：\n5，序号2，和2之间差1个3。 8，序号3，和2之间差2个3（2+2个3）。 11，序号4，和2之间差3个3（2+3个3）。 14，序号5，和2之间差4个3（2+4个3）。 \u0026hellip; 根据规律问题变成了：序号21，2到底要加几个3？\n答案是：2 + (序号 - 1)个3，也就是2+20个3，所以第21项的数字是：62。\n因此得出公式：$$第n项的数 = 首项 + (n的序号 - 1) \\times 公差$$ 如果求第1个项的数字，也就是求首项，那么公式是： $$首项 = 末项 - (项数 - 1) ×公差$$\n求项的序号 5、8、11、14、17、20、\u0026hellip;、65是其中的第几项？\n如果项是最后一个也称为求项数\n直接套公式：$$某项的序号 = (某项的数 - 首项) \\div 公差 + 1$$ 公差是3，也就是：(65 - 5) / 3 + 1，65项的序号是：21。\n求和 2、4、6、8、10、12、14，这个数列各项加起来的和是多少？\n分析：\n倒序相加求和\n正序 S = 2 + 4 + 6 + 8 + 10 + 12 + 14 倒序 S = 14 + 12 + 10 + 8 + 6 + 4 + 2 2+14、4+12、6+10，正序和倒序的值加在一起都是相等的，于是可以写成：\n2S = (2 + 14) × 7 S = (2 + 14) × 7 ÷ 2 最终各项加起来的和是：56。\n得出公式，这个公式也称为高斯求和： $$和 = (首项 + 末项) \\times 项数 \\div 2$$\n参考 小学数学—计算之等差数列_哔哩哔哩_bilibili 小学奥数——高斯求和公式，简单问题的再思考 ","date":"2023-09-07T19:05:42+08:00","permalink":"https://ghbjayce.github.io/p/subject/math/sequence/arithmetic/","title":"什么是等差数列？"},{"content":"前言 一开始打算在手机上安装git，想到的是安装app，于是各种找，找到了有如：\nagit MGit \u0026hellip; 但是试过这些app以后发现要么BUG很多，要么根本不能正常使用，而且项目也很久没有更新了，只能另外再找别的app。\n机缘巧合下，让我找到了口袋git（com.aor.pocketgit）的app，正常使用了一段时间，最近再用的时候，频繁出现了Failed to fetch my_project.，没有办法fetch项目，也就没法继续使用了。\n开始我以为是账号密码的认证方式出了问题，于是我尝试换另一种认证方式——私钥，但是它的私钥是.ppk的格式，和ssh生成的密钥不太一样，一轮搜索以后：\n说是需要用到PuTTy的PuTTY Key Generator来对ssh的密码进行转换处理得到.ppk的文件。 按照步骤转换好以后再放到app上，显示了感叹号，感觉不太对劲，进行fetch操作时果然，提示Invalid Private Key. 好家伙，ppk的方式也不行，也不想再试了，那为什么用的好好的账密认证方式出了问题呢？\n我估计是最近github强制使用2FA的关系，登录账号需要经过两步验证，app应该是没有做这个异常处理，而且在app内也没有办法升级。\n于是我放弃了这个app，换了另一条路。\n安装git环境 在逛Stack Overflow时发现了Termux这个app，它是在Android上运行的一个终端软件，也就是直接敲命令在手机上安装git环境。\n打开app，执行以下命令安装：\n1 2 $ apt update $ apt install git 安装完以后，熟悉的操作方式就回来了：\n1 2 $ git --version git version 2.42.0 剩下的就不用多说了，ssh-keygen走一波，下面贴一下我遇到的问题和解决过程。\n操作过程 第一时间就是进入到项目目录，先看看自己在哪个目录：\n1 2 3 4 5 $ pwd /data/data/com.termux/files/home # 然后查看根目录都有些什么 $ ls / ls: cannot open directory \u0026#39;/\u0026#39;: Permission denied 竟然没权限，whoami一看，哦，看来还是root用习惯了，普通用户只拥有/data/data/com.termux目录下的权限，而/data/data之前的目录都没有权限。\n那怎么搞？没有权限我怎么知道我的项目在哪个路径下？？\n熟悉安卓开发的同学或者搞过机的同学就知道，我们在文件管理看到的根目录，是在/storage/emulated/0/下，我也是在折腾了一番以后才得知。\n这么长的路径，不行，我得设置成全局变量才行\n1 2 3 4 5 6 7 8 # 习惯用vim去编辑，其实还有别的方式 $ vim ~/.bash_profile The program vim is not installed. Install it by executing: pkg install vim or pkg install vim-gtk, after running pkg in x11-repo or pkg install vim-python 这里我执行了pkg install vim，然后你懂的。\n然后cd进项目路径，查看配置信息：\n1 2 3 $ git config --list fatal: detected dubious ownership in repository at \u0026#39;/xxx/xxx\u0026#39; To add an exception for this directory, call: git config --global --add safe.directory /xxx/xxx 跟着提示将我们的项目路径设置成安全目录就行。\n1 2 3 $ ssh-keygen -t rsa -C \u0026#34;your@email.com\u0026#34; The program ssh-keygen is not installed. Install it by executing: pkg install openssh 跟着提示执行pkg install openssh，然后遇到连续四个CANNOT LINK EXECUTABLE \u0026quot;ssh-keygen\u0026quot;: library \u0026quot;libcrypto.so.3\u0026quot; not found。\n这里需要执行pkg install openssl安装相关依赖，再重新执行安装命令就可以了。\n1 2 $ git fetch origin CANNOT LINK EXECUTABLE \u0026#34;/data/data/com.termux/files/usr/libexec/git-core/git-remote-https\u0026#34;: library \u0026#34;libssl.so.1.1\u0026#34; not found 解决：\n1 2 3 4 5 6 7 $ find /data/data/com.termux/files -name \u0026#39;libssl.so.*\u0026#39; /data/data/com.termux/files/usr/lib/openssl-1.1/libssl.so.1.1 /data/data/com.termux/files/usr/lib/libssl.so.3 # 如果没有的话，先执行 pkg install openssl1.1-tool # 添加环境变量 echo \u0026#34;export LD_LIBRARY_PATH=/data/data/com.termux/files/usr/lib/openssl-1.1\u0026#34; \u0026gt;\u0026gt; ~/.bash_profile \u0026amp;\u0026amp; source ~/.bash_profile 新的问题：\n1 2 3 4 $ git fetch origin fatal unable to access \u0026#39;https://github.com/xxx.git\u0026#39;: HTTP/2 stream 1 was not closed cleanly before end of the underlying stream # 解决： $ git config --global http.version HTTP/1.1 参考 How to use Git on Android? - Stack Overflow 生成Git ssh公钥和私钥（ppk）文件 Termux-setup-storage - Termux Wiki library “libssl.so.1.1“ not found 安卓神器termux使用命令时的报错。_4ustn1ne的博客-CSDN博客 ","date":"2023-08-30T13:26:26+08:00","permalink":"https://ghbjayce.github.io/p/system/android/env/install-git/","title":"在android上安装git环境"},{"content":"目录 第一章 概论 第二章 线性表 第三章 栈、队列和数组 第四章 树和二叉树 第五章 图 第六章 查找 第七章 排序 概要 线性表 概念 特征 基本运算的功能描述 初始化 求表长 读取元素 定位 插入 删除 线性表的顺序存储结构——顺序表 概念 用类C语言的描述 运算实现的关键步骤和算法 容量 表长 插入 删除 定位 应用 实现简单算法 算法实现的分析 线性表的链式存储结构——单链表 特点和结构 基本概念 头指针 头结点 首结点 尾结点 空链表 用类C语言的描述 运算实现的关键步骤和算法 插入 删除 定位 综合应用 设计算法解决应用问题 顺序表和链表的优缺点、适用场景 循环链表和双向循环链表 特点和结构 用类C语言的描述 基本运算 插入 删除 线性表 概念 线性表Linear List是一种线性结构，它是由n（n ≥ 0）个数据元素组成的有穷序列，其中：\n数据元素又称为结点。 这里的n代表线性表的总结点个数，又称为表长。 当表长为0时，也就是线性表没有任何结点，称为空表，用 () 或 Ø 表示。 线性表通常表示成：(A1, A2, A3, ..., An)，其中： A1称为起始结点。 An称为终端结点。 A1是A2的直接前驱，A3是A2的直接后继，其他结点同理。 特征 线性表中结点之间具有一对一的关系。 非空表的情况下： 除了起始结点没有直接前驱（例：A1），其他的结点有且仅有一个直接前驱（例：A2、A3等）。 除了终端结点没有直接后继（例：An），其他的结点有且仅有一个直接后继（例：A1、A2等）。 基本运算的功能描述 以下的no指的是序号，文中所有提到的“位置”都是指序号。\n避免用i命名是怕和数组的下标混在一起，数组的下标是从0开始，而序号是从1开始。\n初始化Initiate(L)：建立一个空表L=()，L不包含任何结点。 求表长Length(L)：返回线性表L的长度，以下简称表L。 读取元素Get(L, no)：返回表L的第no个结点，当no超出Length(L) ≥ no ≥ 1范围，返回一特殊值。 定位Locate(L, x)：返回表L中第一个结点的值等于x值的序号，如果找不到则返回0。 插入Insert(L, x, no) ：两个步骤。 在表L的第no个结点之前插入一个新结点x，no的合法范围：Length(L) + 1 ≥ no ≥ 1。 表长度加1。 删除Delete(L, no)：两个步骤。 删除表L的第no个结点，no的合法范围：Length(L) ≥ no ≥ 1。 表长度减1。 顺序表 概念 顺序存储：将结点依次存放在计算机内存中一组连续的存储单元中，逻辑结构中相邻的结点它的存储位置也相邻。 顺序表：用顺序存储实现的线性表，一般使用数组来表示顺序表。 用类C语言来描述 假设线性表的数据元素的类型为DataType，顺序表的结构定义如下：\n1 2 3 4 5 6 7 const int Maxsize = 100; // 预先定义一个足够大的常数 typedef struct { DataType data[Maxsize]; // 存放数据的数组 int length; // 顺序表的实际长度 } SeqList; // 顺序表类型名为SeqList SeqList L; // 定义L为一个顺序表 例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13 const int Maxsize = 7; // 预先定义数组大小 typedef struct { int num; // 学号 char name[8]; // 姓名 int age; // 年龄 } DataType; // 定义结点的类型 typedef struct { DataType data[Maxsize]; // 存放数据的数组 int length; // 线性表的实际长度 } SeqList; // 顺序表的类型 SeqList student; // student是顺序表的名称 运算 插入 算法：\n1 2 3 4 5 6 7 8 9 10 11 void func(SeqList L, DataType x, int no) { if (L.length \u0026gt;= Maxsize) exit(\u0026#34;表已满\u0026#34;); // 等同于：no \u0026lt;= 0 || no \u0026gt;= L.length + 2 if (no \u0026lt; 1 || no \u0026gt; L.length + 1) exit(\u0026#34;插入位置不正确\u0026#34;); for (j = L.length; j \u0026gt;= no; j--) { L.data[j] = L.data[j - 1]; } L.data[no - 1] = x; L.length++; } 步骤：\n检查插入位置是否合法。 表容量，表满了以后不能再插入。 插入位置： 不能插入序号no = 0及之前的位置，no = 1的位置可以插入。 要插入的位置，它前面的位置不能是空的，也就是不能断开插入。 例：插入第5个位置，第4个位置是空的。 为插入位置腾出空位，从最后一个结点开始从后往前循环，将结点往后移一个位置，直到插入位置结束。 插入新的结点x，也就是序号no的位置，对应下标为：no-1。 表长度加一。 分析：\n算法复杂度：O(n)。 平均移动次数：$\\frac{n}{2}$。 插入算法中，元素的移动次数不仅与顺序表的长度n有关，还和插入的no位置有关：\n当插入位置是n+1时，移动次数为0。 当插入位置是n时，移动次数为1，这个称为首项（从存在的元素中选取，它也可以是尾项）。 当插入位置是n-1时，移动次数为2。 当插入位置是n-2时，移动次数为3。 \u0026hellip; 当插入位置是1时，移动次数为n，这个称为末项。 根据移动次数变化的规律可以看出：\n移动次数的计算方式为：n - no + 1。 可插入的位置有：n + 1个。 这是个等差数列。 使用高斯求和公式可以得出总的移动次数为：$\\frac{(n + 1) \\times n}{2}$。 因此平均移动次数：$\\frac{总移动次数}{可插入位置}$也就是$\\frac{\\frac{(n + 1) \\times n}{2}}{n + 1}$约为$\\frac{n}{2}$。 如果我有理解错平均移动次数，请大佬随时斧正，联系我。\n删除 算法：\n1 2 3 4 5 6 7 8 9 10 void DeleteSeqList(SeqList L, int no) { // 等同于：no \u0026lt;= 0 || no \u0026gt;= L.length + 1 if (no \u0026lt; 1 || no \u0026gt; L.length) exit(\u0026#34;非法位置\u0026#34;); for (j = no, j \u0026lt; L.length; j++) { L.data[j-1] = L.data[j]; } L.length--; } 步骤：\n检查删除位置是否合法，不能是0及之前的位置，也不能是超出表长之后的位置。 覆盖结点，从删除位置开始，后一个结点移动到前一个位置，直到最后一个结点结束，即表示删除。 表长度减一。 分析：\n算法复杂度：O(n)。 平均移动次数：$\\frac{n-1}{2}$。 跟插入算法一样：\n当删除位置是n时，移动次数为0。 当删除位置是n-1时，移动次数为1。 当删除位置是n-2时，移动次数为2。 \u0026hellip; 当删除位置是1时，移动次数为n-1。 根据规律得出：\n移动次数的计算方式：n - no。 可删除的位置有：n个。 同样是等差数列。 使用高斯求和公式得出总的移动次数：$\\frac{(0 + n - 1) \\times n}{2}$。 平均移动次数：$\\frac{总移动次数}{可删除的位置}$也就是$\\frac{\\frac{(0 + n - 1) \\times n}{2}}{n}$约为$\\frac{n-1}{2}$。 如果我有理解错平均移动次数，请大佬随时斧正，联系我。\n定位 算法：\n1 2 3 4 5 6 7 8 9 10 11 void findSeqList(SeqList L, DataType x) { int i = 0; while ((i \u0026lt; L.length) \u0026amp;\u0026amp; (L.data[i] != x)) { i++; } if (i \u0026lt; L.length) { return i + 1; } return 0; } 步骤：\n初始化一个下标值：0。 从头到尾逐个比对，数组中的结点是否与结点x相等： 不相等则继续循环。 相等则表示已经找到，停止循环。 返回查找结果。 表长 只需要返回L.length即可\n链表 链式存储：各个结点在内存中的存储位置并不连续，可以存放在不同位置，指针表示数据元素之间的逻辑关系。 链表：用链式存储实现的线性表，结点之间可以重新链接，链表分为： 单链表：一个链表结点由一个数据元素和一个指针构成。 循环链表： 双向循环链表： 参考 ","date":"2023-08-29T14:46:12+08:00","permalink":"https://ghbjayce.github.io/p/book/080901/02142/chapter2/","title":"第二章 线性表 - 《数据结构导论》笔记"},{"content":"目录 第一章 概论 第二章 线性表 第三章 栈、队列和数组 第四章 树和二叉树 第五章 图 第六章 查找 第七章 排序 阅读说明 本书 书名：《数据结构导论》 出版：外语教学与研究出版社 版本：2012年版 全书以类C语言来描述相关内容，例如：存储结构、算法等。 本文涉及知识点 数学知识 乘法分配率 对数 等差数列、高斯求和 概要 数据、数据元素和数据项 基本概念 三者的关系 数据的逻辑结构和存储结构 四种基本的逻辑结构和特点 集合 线性结构 树形结构 图结构 两种基本的存储结构 顺序存储 链式存储 逻辑结构与存储结构的关系 运算与逻辑结构的关系 算法分析 描述方法 评价因素 时间复杂度的分析方法 空间复杂度的分析方法 数据、数据元素和数据项 概念和联系 数据项：在数据表中指的是一个个的字段，又称字段或域，数据的最小标识单位。 数据元素：在数据表中相当于一行记录，又称结点，由若干个数据项组成。 数据：被计算机处理、存储的对象，由若干个数据元素组成。 数据的逻辑结构和存储结构 概念 数据结构：包含数据的逻辑结构、存储结构和基本运算。 逻辑结构：整个数据元素之间的逻辑关系。 逻辑关系：指单个数据元素之间的关联方式或邻接关系，也就是单个数据元素之间的组织形式。 存储结构：也称物理结构，数据的逻辑结构在计算机中的实现称为数据的存储结构。 简单点说：为了保存数据的逻辑结构到计算机中而实现的存储结构。 逻辑结构 四类基本的逻辑结构：\n集合：任意两个结点之间都没有邻接关系，组织形式松散，就像抽奖箱里的乒乓球。 结点之间除了同属一个集合，并没有别的关系。 线性结构：结点之间一个个依次相邻接排列，形成一条“链”，就像一条绳子上的多个绳结。 结点之间是一对一的相互关系。 树形结构：上层结点有多个下层结点，下层结点只有一个上层结点，具有分支、层次特性，就像一颗树。 结点之间是一对多的相互关系。 图结构：最为复杂的结构，任意两个结点都可以相邻接，就像地铁线路图、人与人之间的社交网络。 结点之间是多对多的相互关系。 存储结构 存储结构一般包括两个部分：\n需要存储的数据元素 结点之间的逻辑关系 实现结点之间的逻辑关系的存储结构，一般有四种形式，主要掌握顺序存储和链式存储：\n顺序存储：所有结点存储在一个连续的存储区域里，利用结点在存储器中的相对位置，来表示结点之间的逻辑关系。 链式存储：除了存储结点本身，还需要一个指针，指针指向有逻辑关系的结点，也就是利用指针表示结点之间的逻辑关系。 索引存储 散列存储 如何描述 怎么描述存储结构是哪种类型？哪种实现形式呢？分为两种方式：\n机器级：即存储结构在计算机存储器里的表示形式，以内存地址的方式。 语言级：即用程序设计语言中的类型说明、变量说明，例如，数据类型：数组、结构体和指针等。 运算 概念 运算是指在逻辑结构上施加的操作，也就是对逻辑结构的加工。\n这些运算操作包括：\n建立 查找 读取 插入 删除 等\u0026hellip; 算法分析 评价算法 评价算法好坏的因素分为几个方面：\n正确性：能正确地实现预定的功能，满足具体问题的需要。 易读性：易于阅读、理解和交流，便于调试、修改和扩充。 健壮性：能处理不同的输入环境，即使是非法数据，也不会产生预料不到的运行结果。 时空性：指算法的时间性能（所需计算量）和空间性能（所需存储量）。 时间复杂度 计算量 来算一算函数执行了几次\n例子A：\n1 2 3 4 5 int func1(void) { printf(\u0026#34;hello GHBJayce\u0026#34;); return 0; } 共执行了2次，printf1次 + return1次\n例子B：\n1 2 3 4 5 6 7 int func2(int n) { for (int i = 0; i \u0026lt; n; ++i) { printf(\u0026#34;hello GHBJayce\u0026#34;); } return 0; } 共执行了3n + 3次\n分析过程：\nint i = 0，由始至终仅会执行1次。 i \u0026lt; n，执行n + 1次。 ++i，执行n次。 printf，执行n次。 return，执行1次。 要估算某段代码的执行次数，可以用T(n)来表示：\nT：某段代码的总执行次数。 n：输入数据的规模大小或者数量。 也就是一个算法的计算量是问题规模n的函数，代入以上例子来表示：\n例子A：T(n) = 2 例子B：T(n) = 3n + 3 转换 得出代码的执行次数估算值后，需要转换成时间复杂度的表示方式，以下是转换规则：\n如果T(n)是常数的话，时间复杂度直接估算为 1。 如果T(n)不是常数的话，例如：常数 × n + 常数 仅保留最高次项，也就是常数 × n 常数化为1，也就是1 × n，这里的系数可以直接省略。 因此时间复杂度估算为：n。 表达方式还不完整，需要加上大O表示法，也称渐进表示法，例如：O(时间复杂度估算值)\n结合以上例子，那么时间复杂度表示为：\n例子A：O(1) 例子B：O(n) 如果代码量比较多或者函数调用比较多的情况下这样估算会相当麻烦，所以下面是简化估算过程：\n例子C：\n1 2 3 4 5 6 7 8 void func3(int n) { for (int i = 0; i \u0026lt; n; ++i) { for (int j = 0; j \u0026lt; n; ++j) { printf(\u0026#34;hello GHBJayce\u0026#34;); } } } 分析过程：\n里面的for循环的时间复杂度：n + 1 这里for的时间复杂度：n for里面的语句的时间复杂度：1 外面的for循环的时间复杂度：(n + 1) × n，也就是(n × n) + (n × 1)，即n² + n 最终时间复杂度为：O(n²)\n例子D：\n1 2 3 4 5 6 7 8 void func(int n) { for (int i = 0; i \u0026lt; n; ++1) { for (int j = i; j \u0026lt; n; ++j) { printf(\u0026#34;hello GHBJayce\u0026#34;); } } } 最终时间复杂度为：O(n²)，待补充\u0026hellip;\n例子E：\n1 2 3 4 5 6 void func(int n) { for (int i = 1; i \u0026lt; n; i *=2) { printf(\u0026#34;hello GHBJayce\u0026#34;); } } 最终时间复杂度为：O(logn)，待补充\u0026hellip;\n性能对比 常数阶：O(1) 对数阶：O(log2n)，log的底数可以省略不写，也就是：O(logn)，下面也是一样 线性阶：O(n) 线性对数阶：O(nlogn) 多项式阶：O(nc)，C为大于1的正整数，下面也是一样 平方阶：O(n²) 立方阶：O(n3) K次方阶：O(nk) 指数阶：O(Cn)，常见是O(2n) 以上时间复杂度，复杂程度和耗时从上往下依次增加，即越往下时间复杂度越高，所需耗时越多。\n通常认为，具有指数阶的算法是不可计算的，而阶数低于平方阶的算法是高效率的。\n另外，时间复杂度的性能还会受到输入数据的变化而有所影响，基于相同输入数据量的不同输入数据，分为：\n最坏时间复杂度：算法时间用量的最大值。 平均时间复杂度：算法时间用量的平均值。 空间复杂度 一个算法的空间复杂度定义为该算法所耗费的存储空间，它也是问题规模n的函数，记为： $$S(n)=O(g(n))$$ 其中，g(n)为问题规模n的某个函数。一个算法在执行期间所需的存储空间量分为：\n程序代码所占用的空间，对不同算法来说也不会有数量级的差别。 输入数据所占用的空间，由问题规模决定的，不随算法的不同而改变。 辅助变量所占用的空间，也称附加存储空间，它所占用的空间会受到问题规模和不同的算法所影响。 来个例子实践一下，假设，n=100。\n例子A：\n1 2 3 4 5 6 7 8 9 void f1(int a[], int n) { int i, temp; for (i = 0; i \u0026lt;= n/2; i++) { temp = a[i]; a[i] = a[n-1-i]; a[n-1-i] = temp; } } f1所需要的辅助变量为2个整型变量i和temp，与问题的规模无关，空间复杂度为：O(1)。\n例子B：\n1 2 3 4 5 6 7 8 void f2(int a[], int n) { int i, b[100];//随n的大小 for (i = 0; i \u0026lt;= n-1; i++) b[i] = a[n-1-1]; for (i = 0; i \u0026lt;= n-1; i++) a[i] = b[i]; } f2所需要的辅助变量为1个整型变量i和随n大小的数组b，b与问题的规模有关，空间复杂度为：O(n)。\n如果是递归调用呢？\n待补充\u0026hellip;\n参考 指数和对数 小学生也能看懂的时间复杂度 小学速算技巧15讲：简便计算，认知乘法分配率 ","date":"2023-08-20T16:36:20+08:00","permalink":"https://ghbjayce.github.io/p/book/080901/02142/chapter1/","title":"第一章 概论 - 《数据结构导论》笔记"},{"content":"前言 开头废话有点多，点我进入正题\n为什么想要搭建一个博客？ 说起来有很多方面的因素，最重要的目的是希望能够留下一些技术积累和记录可以给别人看，同时提升一下写作的能力，毕竟与平时记笔记的方式完全不同。\n虽然也没有什么人看🤷\n其实在此之前也有写过博客，比如早期使用heroku + php搭建的个人博客，因为需要不断开发完善功能，加上后来也不免费了，索性不折腾直接上博客网站上写博客，如：CSDN、Segmentfault等。\n但这些平台使用下来以后也发现了一些问题，总的来说就是不适合自己的使用，写文章的过程也不够简洁直接，不够纯粹。\n我理想中的博客是什么？ 专注于markdown的编写 支持全文检索 具有标签功能 能够归档文章 免费 支持永久存储 为什么选择了hugo？ 查阅资料得知，静态站点生成器有三种提的比较多，分别是：\njekyll，基于Ruby语言编写 hexo，基于Node.js编写 hugo，基于Go语言编写 之所以选择hugo，它是当中编译速度最快、文档相对友好、star数量还多，正好无意间找到Hugo Themes的主题，很好的契合了需求，就决定是它了。\n阅读前提 本文默认你已经掌握了以下的几个点：\n了解github pages并且会配置 熟悉使用git 通过该文章可以快速上手使用hugo，所以有一些内容不会详细展开。\n快速入门 安装Hugo 这里我用的是Mac系统，所以采用Homebrew的方式进行安装，其他安装方式自行查阅。\n1 2 brew install hugo hugo version 创建项目 1 2 3 hugo new site your-project-name cd your-project-name git init 由于我已经有git项目ghbjayce.github.io，里面没有任何东西，所以这里我使用了hugo new site GHBJayce --force，既不影响hugo的生成又不影响git的项目。\n执行完以后，你会得到以下的目录结构：\n1 2 3 4 5 6 7 8 9 ├── archetypes │ └── default.md ├── assets ├── content ├── data ├── hugo.toml ├── layouts ├── static └── themes 安装主题 由于新建的项目没有默认主题，我们从主题库把挑好的主题下载下来。\n1 2 3 4 5 6 git clone git@github.com:CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack cp -r ./themes/hugo-theme-stack/exampleSite/content/* ./content cp ./themes/hugo-theme-stack/exampleSite/config.yaml ./hugo.yaml rm -f ./hugo.toml # 以下是示例主题需要操作的命令，避免没有翻墙的情况下启动不了项目 rm -rf ./content/post/rich-content 站点配置文件为hugo.toml，支持三种后缀的格式：toml、yaml、json，这里我选择用yaml\nHello World 生成一篇文章。\n1 2 # 对应的生成位置：/your-project-name/content/post/first-post.md hugo new post/first-post.md 打开它写点内容。\n1 2 3 4 5 6 7 --- title: \u0026#34;First Post\u0026#34; date: 2023-06-20T17:45:58+08:00 draft: true --- # hello world 启动 1 2 # 执行成功以后，终端会出现server的地址，例如：http://localhost:1313/ hugo server --buildDrafts --buildDrafts的作用是草稿文章（对应文章中的draft: true属性）也进行生成，去除的话会跳过生成草稿。\n构建\u0026amp;发布 1 hugo 你会看到多出一个public目录，就是构建好以后的内容，里面的内容完全是静态的，放到站点下就能够访问。\n但是我们要发布到github page上，根目录只支持/docs，所以我们得把public改成docs，有两种方式：\n构建时加上参数：hugo --destination docs 在配置文件中加入参数：publicDirectory: docs 如果仓库只放public目录下的内容，那么可以忽略这里。\n版本说明 文中相关软件版本说明：\nhugo：v0.113.0 hugo-theme-stack：v3.16.0 参考 Quick Start | Hugo URL management | Hugo ","date":"2023-06-20T23:46:50+08:00","image":"https://repository-images.githubusercontent.com/11180687/9d3d8200-abf2-11e9-803c-4cdfde0d22e5","permalink":"https://ghbjayce.github.io/p/static-site-generator/hugo/quick-start/","title":"hugo快速上手搭建一个静态博客"}]